input {
    beats {
        port => 5044
    }
}

## Add your filters / logstash plugins configuration here
filter {
    if [log_type] == "TYPE_AUDIT" {

    }
    else if [log_type] == "TYPE_PARSED_SLOG" {
        json {
            source => "message"
        }
    }
    else if [log_type] == "TYPE_BASH" {

    }
    else if [log_type] == "TYPE_BASH_CENTRALIZED" {
        grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:log_time} : %{USER:user}@%{IPORHOST:source} : %{PATH:cwd} : %{GREEDYDATA:command}" }
        }
    }
    else if [log_type] == "TYPE_HTTP" {
        json {
            source => "message"
        }
    }
}

output {
    if [log_type] == "TYPE_AUDIT" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            user => "elastic"
            password => "changeme"
            index => "nethive-audit-%{+YYYY.MM.dd}"
        }
    }
    if [log_type] == "TYPE_PARSED_SLOG" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            user => "elastic"
            password => "changeme"
            index => "nethive-slog-%{+YYYY.MM.dd}"
        }
    }
    if [log_type] == "TYPE_BASH" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            user => "elastic"
            password => "changeme"
            index => "nethive-bash-%{+YYYY.MM.dd}"
        }
    }
    if [log_type] == "TYPE_BASH_CENTRALIZED" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            user => "elastic"
            password => "changeme"
            index => "nethive-bash-%{+YYYY.MM.dd}"
        }
    }
    if [log_type] == "TYPE_HTTP" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            user => "elastic"
            password => "changeme"
            index => "nethive-http-%{+YYYY.MM.dd}"
        }
    }
    # stdout {
    #     codec => rubydebug
    # }
    # if [type] == "mysql" {
    #     tcp {
    #         codec => json_lines
    #         host => "172.17.0.1"
    #         port => 5128
    #     }
    # }
}