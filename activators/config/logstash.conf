input {
    tcp {
        port => 5000
    }
    beats {
        port => 5044
    }
}

## Add your filters / logstash plugins configuration here
filter {
    if [log_type] == "TYPE_AUDIT" {

    }
    else if [log_type] == "TYPE_RAW_SLOG" {
        # Capture user, optional host and optional ip fields# sample log file lines: #User @Host: logstash[logstash] @ localhost[127.0 .0 .1]# User @Host: logstash[logstash] @[127.0 .0 .1]
        grok {
            match => ["message", "^# User@Host: %{USER:user}(?:[[^]]+])?s+@s+%{HOST:host}?s+[geshifilter-questionmarkphp]{IP:ip}[/geshifilter-questionmarkphp]"]
        }
		# Capture query time, lock time, rows returned and rows examined# sample log file lines: #Query_time: 102.413328 Lock_time: 0.000167 Rows_sent: 0 Rows_examined: 1970# Query_time: 1.113464 Lock_time: 0.000128 Rows_sent: 1 Rows_examined: 0
        grok {
            match => ["message", "^# Query_time: %{NUMBER:duration:float}s+Lock_time: %{NUMBER:lock_wait:float} Rows_sent: %{NUMBER:results:int} s*Rows_examined: %{NUMBER:scanned:int}"]
        }
		# Capture the time the query happened
        grok {
            match => ["message", "^SET timestamp=%{NUMBER:timestamp};"]
        }
		# Extract the time based on the time of the query and# not the time the item got logged
        date {
            match => ["timestamp", "UNIX"]
        } 
		# Drop the captured timestamp field since it has been moved to the# time of the event
        mutate {
            remove_field => "timestamp"
        }
    }
    else if [log_type] == "TYPE_PARSED_SLOG" {
        json {
            source => "message"
        }
    }
    else if [log_type] == "TYPE_BASH" {

    }
    else if [log_type] == "TYPE_BASH_CENTRALIZED" {

    }
    else if [log_type] == "TYPE_HTTP" {
        json {
            source => "message"
        }
    }
}

output {
    elasticsearch {
        hosts => "elasticsearch:9200"
        user => "elastic"
        password => "changeme"
        index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
        document_type => "%{[@metadata][type]}"
    }
    stdout {
        codec => rubydebug
    }
}