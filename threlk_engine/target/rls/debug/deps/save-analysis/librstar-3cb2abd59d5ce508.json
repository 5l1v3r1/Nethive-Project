{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0","program":"/home/mrcoffee/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","rstar","/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=3cb2abd59d5ce508","-C","extra-filename=-3cb2abd59d5ce508","--out-dir","/home/mrcoffee/Blackhead/threlk_engine/target/rls/debug/deps","-L","dependency=/home/mrcoffee/Blackhead/threlk_engine/target/rls/debug/deps","--extern","num_traits=/home/mrcoffee/Blackhead/threlk_engine/target/rls/debug/deps/libnum_traits-a57391a0f5b7cd32.rmeta","--extern","pdqselect=/home/mrcoffee/Blackhead/threlk_engine/target/rls/debug/deps/libpdqselect-ae8c37659533004d.rmeta","--extern","threadpool=/home/mrcoffee/Blackhead/threlk_engine/target/rls/debug/deps/libthreadpool-f1b6ddc467571ee7.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/mrcoffee/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/mrcoffee/Blackhead/threlk_engine/target/rls/debug/deps/librstar-3cb2abd59d5ce508.rmeta"},"prelude":{"crate_id":{"name":"rstar","disambiguator":[151854510052089372,13088346414138955944]},"crate_root":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src","external_crates":[{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11465483288401737638,5550572350724654778]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8555818017763115910,12072062234804656131]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4438720507160810541,18229149757739284107]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14956713765672054331,16711555291873599790]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11668151181258983540,17314908725283844671]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[6538090605504255516,13885356363809628147]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4787848669120998683,5174148560041752949]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[7027550587003088190,15466513828826127728]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5938899731853885013,18021396312511623872]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1865682747167002125,8647521614981767847]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[1865007528563448287,2705491453355471832]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/bulk_load/bulk_load_parallel.rs","num":15,"id":{"name":"threadpool","disambiguator":[17382381718250902125,11993798418913479834]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/bulk_load/bulk_load_parallel.rs","num":16,"id":{"name":"num_cpus","disambiguator":[7451791027241072930,6970904141542759315]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/bulk_load/bulk_load_parallel.rs","num":17,"id":{"name":"libc","disambiguator":[180321054851630246,7571081368770862621]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","num":18,"id":{"name":"num_traits","disambiguator":[16722467606992384735,13072909226141853586]}},{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","num":19,"id":{"name":"pdqselect","disambiguator":[9340951016321904015,850555883853322092]}}],"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":0,"byte_end":1481,"line_start":1,"line_end":47,"column_start":1,"column_end":39}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":797},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/mod.rs","byte_start":65968,"byte_end":65972,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Line","value":"","parent":{"krate":0,"index":458}},{"kind":"Use","ref_id":{"krate":0,"index":830},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/mod.rs","byte_start":65999,"byte_end":66008,"line_start":7,"line_end":7,"column_start":26,"column_end":35},"alias_span":null,"name":"Rectangle","value":"","parent":{"krate":0,"index":458}},{"kind":"Use","ref_id":{"krate":0,"index":254},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1189,"byte_end":1211,"line_start":41,"line_end":41,"column_start":34,"column_end":56},"alias_span":null,"name":"RStarInsertionStrategy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":349},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1238,"byte_end":1246,"line_start":42,"line_end":42,"column_start":26,"column_end":34},"alias_span":null,"name":"Envelope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1272,"byte_end":1285,"line_start":43,"line_end":43,"column_start":25,"column_end":38},"alias_span":null,"name":"PointDistance","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":373},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1287,"byte_end":1298,"line_start":43,"line_end":43,"column_start":40,"column_end":51},"alias_span":null,"name":"RTreeObject","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":716},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1325,"byte_end":1338,"line_start":44,"line_end":44,"column_start":25,"column_end":38},"alias_span":null,"name":"DefaultParams","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":400},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1340,"byte_end":1357,"line_start":44,"line_end":44,"column_start":40,"column_end":57},"alias_span":null,"name":"InsertionStrategy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":392},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":59,"column_end":70},"alias_span":null,"name":"RTreeParams","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":414},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1396,"byte_end":1401,"line_start":45,"line_end":45,"column_start":24,"column_end":29},"alias_span":null,"name":"Point","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":411},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1403,"byte_end":1411,"line_start":45,"line_end":45,"column_start":31,"column_end":39},"alias_span":null,"name":"RTreeNum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":858},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1436,"byte_end":1441,"line_start":46,"line_end":46,"column_start":23,"column_end":28},"alias_span":null,"name":"RTree","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":868},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":1476,"byte_end":1480,"line_start":47,"line_end":47,"column_start":34,"column_end":38},"alias_span":null,"name":"AABB","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":0,"byte_end":1481,"line_start":1,"line_end":47,"column_start":1,"column_end":39},"name":"","qualname":"::","value":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":345},{"krate":0,"index":367},{"krate":0,"index":387},{"krate":0,"index":404},{"krate":0,"index":458},{"krate":0,"index":515},{"krate":0,"index":618},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":715}],"decl_id":null,"docs":" An n-dimensional r*-tree implementation.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":862,"byte_end":884,"line_start":23,"line_end":23,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":134},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":13980,"byte_end":13997,"line_start":16,"line_end":16,"column_start":12,"column_end":29},"name":"SelectionIterator","qualname":"::algorithm::iterators::SelectionIterator","value":"SelectionIterator {  }","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":14257,"byte_end":14260,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectionIterator>::new","value":"fn (root: &'a ParentNodeData<T>, func: Func) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":152},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":15309,"byte_end":15329,"line_start":70,"line_end":70,"column_start":12,"column_end":32},"name":"SelectionIteratorMut","qualname":"::algorithm::iterators::SelectionIteratorMut","value":"SelectionIteratorMut {  }","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":15596,"byte_end":15599,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectionIteratorMut>::new","value":"fn (root: &'a mut ParentNodeData<T>, func: Func) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":254},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/rstar.rs","byte_start":32415,"byte_end":32437,"line_start":17,"line_end":17,"column_start":10,"column_end":32},"name":"RStarInsertionStrategy","qualname":"::algorithm::rstar::RStarInsertionStrategy","value":"RStarInsertionStrategy::{}","parent":null,"children":[],"decl_id":null,"docs":" Inserts points according to the r-star heuristic.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":287},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":41260,"byte_end":41277,"line_start":6,"line_end":6,"column_start":11,"column_end":28},"name":"SelectionFunction","qualname":"::algorithm::selection_functions::SelectionFunction","value":"SelectionFunction<T>","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":289},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":41318,"byte_end":41333,"line_start":10,"line_end":10,"column_start":10,"column_end":25},"name":"ContainmentUnit","qualname":"::algorithm::selection_functions::SelectionFunction::ContainmentUnit","value":"type ContainmentUnit;","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":41342,"byte_end":41362,"line_start":11,"line_end":11,"column_start":8,"column_end":28},"name":"should_unpack_parent","qualname":"::algorithm::selection_functions::SelectionFunction::should_unpack_parent","value":"fn (&self, envelope: &T::Envelope) -> bool","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":41411,"byte_end":41429,"line_start":13,"line_end":13,"column_start":8,"column_end":26},"name":"should_unpack_leaf","qualname":"::algorithm::selection_functions::SelectionFunction::should_unpack_leaf","value":"fn (&self, leaf: &T) -> bool","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":41523,"byte_end":41541,"line_start":17,"line_end":17,"column_start":8,"column_end":26},"name":"should_unpack_node","qualname":"::algorithm::selection_functions::SelectionFunction::should_unpack_node","value":"fn (&self, node: &RTreeNode<T>) -> bool","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":293},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":41783,"byte_end":41807,"line_start":25,"line_end":25,"column_start":12,"column_end":36},"name":"SelectInEnvelopeFunction","qualname":"::algorithm::selection_functions::SelectInEnvelopeFunction","value":"SelectInEnvelopeFunction {  }","parent":null,"children":[{"krate":0,"index":295}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":41944,"byte_end":41947,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectInEnvelopeFunction<T>>::new","value":"fn (envelope: T::Envelope) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":304},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":42430,"byte_end":42462,"line_start":56,"line_end":56,"column_start":12,"column_end":44},"name":"SelectInEnvelopeFuncIntersecting","qualname":"::algorithm::selection_functions::SelectInEnvelopeFuncIntersecting","value":"SelectInEnvelopeFuncIntersecting {  }","parent":null,"children":[{"krate":0,"index":306}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":42607,"byte_end":42610,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectInEnvelopeFuncIntersecting<T>>::new","value":"fn (envelope: T::Envelope) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":314},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":42978,"byte_end":42991,"line_start":83,"line_end":83,"column_start":12,"column_end":25},"name":"SelectAllFunc","qualname":"::algorithm::selection_functions::SelectAllFunc","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":320},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":43301,"byte_end":43322,"line_start":98,"line_end":98,"column_start":12,"column_end":33},"name":"SelectAtPointFunction","qualname":"::algorithm::selection_functions::SelectAtPointFunction","value":"SelectAtPointFunction {  }","parent":null,"children":[{"krate":0,"index":322}],"decl_id":null,"docs":" A [trait.SelectionFunction] that only selects elements whose envelope\n contains a specific point.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":43476,"byte_end":43479,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<SelectAtPointFunction<T>>::new","value":"fn (point: <T::Envelope as Envelope>::Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":349},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45235,"byte_end":45243,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"Envelope","qualname":"::envelope::Envelope","value":"Envelope: Clone + Copy + PartialEq + ::std::fmt::Debug","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":365}],"decl_id":null,"docs":" An envelope type that encompasses some child nodes.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":350},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45344,"byte_end":45349,"line_start":11,"line_end":11,"column_start":14,"column_end":19},"name":"Point","qualname":"::envelope::Envelope::Point","value":"type Point: Point;","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" The envelope's point type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45447,"byte_end":45456,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"new_empty","qualname":"::envelope::Envelope::new_empty","value":"fn () -> Self","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Creates a new, empty envelope that does not encompass any child.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45551,"byte_end":45565,"line_start":17,"line_end":17,"column_start":12,"column_end":26},"name":"contains_point","qualname":"::envelope::Envelope::contains_point","value":"fn (&self, point: &Self::Point) -> bool","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Returns true if a point is contained within this envelope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45696,"byte_end":45713,"line_start":20,"line_end":20,"column_start":12,"column_end":29},"name":"contains_envelope","qualname":"::envelope::Envelope::contains_envelope","value":"fn (&self, aabb: &Self) -> bool","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Returns true if another envelope is _fully contained_ within `self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45811,"byte_end":45816,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"name":"merge","qualname":"::envelope::Envelope::merge","value":"fn (&mut self, other: &Self) -> ()","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Extends `self` to contain another envelope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45935,"byte_end":45941,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"merged","qualname":"::envelope::Envelope::merged","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Returns the minimal envelope containing `self` and another envelope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":46060,"byte_end":46070,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"intersects","qualname":"::envelope::Envelope::intersects","value":"fn (&self, other: &Self) -> bool","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Sets `self` to the intersection of `self` and another envelope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":46193,"byte_end":46210,"line_start":30,"line_end":30,"column_start":12,"column_end":29},"name":"intersection_area","qualname":"::envelope::Envelope::intersection_area","value":"fn (&self, other: &Self) -> <Self::Point as Point>::Scalar","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Returns the area of the intersection of `self` and another envelope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":46341,"byte_end":46345,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"area","qualname":"::envelope::Envelope::area","value":"fn (&self) -> <Self::Point as Point>::Scalar","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Returns this envelope's area. Must be at least 0.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":46469,"byte_end":46479,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"distance_2","qualname":"::envelope::Envelope::distance_2","value":"fn (&self, point: &Self::Point) -> <Self::Point as Point>::Scalar","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Returns the euclidean distance to the envelope's border.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":47084,"byte_end":47098,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"min_max_dist_2","qualname":"::envelope::Envelope::min_max_dist_2","value":"fn (&self, point: &Self::Point) -> <Self::Point as Point>::Scalar","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Returns the squared min-max distance, a concept that helps to find nearest neighbors efficiently.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":47223,"byte_end":47229,"line_start":48,"line_end":48,"column_start":12,"column_end":18},"name":"center","qualname":"::envelope::Envelope::center","value":"fn (&self) -> Self::Point","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Returns the envelope's center point.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":47332,"byte_end":47344,"line_start":51,"line_end":51,"column_start":12,"column_end":24},"name":"margin_value","qualname":"::envelope::Envelope::margin_value","value":"fn (&self) -> <Self::Point as Point>::Scalar","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Returns a value proportional to the envelope's margin.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":47480,"byte_end":47494,"line_start":54,"line_end":54,"column_start":12,"column_end":26},"name":"sort_envelopes","qualname":"::envelope::Envelope::sort_envelopes","value":"fn <T> (axis: usize, envelopes: &mut [T]) -> ()","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Sorts a given set of objects with envelopes along one of their axis.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":47785,"byte_end":47804,"line_start":60,"line_end":60,"column_start":12,"column_end":31},"name":"partition_envelopes","qualname":"::envelope::Envelope::partition_envelopes","value":"fn <T> (axis: usize, envelopes: &mut [T], selection_size: usize) -> ()","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Partitions objects with an envelopes along a certain axis.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":373},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":50372,"byte_end":50383,"line_start":76,"line_end":76,"column_start":11,"column_end":22},"name":"RTreeObject","qualname":"::object::RTreeObject","value":"RTreeObject","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"decl_id":null,"docs":" An object that can be inserted into an r-tree.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":374},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":50550,"byte_end":50558,"line_start":79,"line_end":79,"column_start":10,"column_end":18},"name":"Envelope","qualname":"::object::RTreeObject::Envelope","value":"type Envelope: Envelope;","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" The object's envelope type. Usually, [AABB](struct.AABB.html) will be the right choice.\n This type also defines the objects dimensionality.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":50719,"byte_end":50727,"line_start":84,"line_end":84,"column_start":8,"column_end":16},"name":"envelope","qualname":"::object::RTreeObject::envelope","value":"fn (&self) -> Self::Envelope","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" Returns the object's envelope.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":376},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":52821,"byte_end":52834,"line_start":149,"line_end":149,"column_start":11,"column_end":24},"name":"PointDistance","qualname":"::object::PointDistance","value":"PointDistance: RTreeObject","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"decl_id":null,"docs":" Defines objects which can calculate their minimal distance to a point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":52929,"byte_end":52939,"line_start":151,"line_end":151,"column_start":8,"column_end":18},"name":"distance_2","qualname":"::object::PointDistance::distance_2","value":"fn (&self, point: &<Self::Envelope as Envelope>::Point) -> <<Self::Envelope as Envelope>::Point as Point>::Scalar","parent":{"krate":0,"index":376},"children":[],"decl_id":null,"docs":" Returns the squared euclidean distance of an object to a point.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":53435,"byte_end":53449,"line_start":161,"line_end":161,"column_start":8,"column_end":22},"name":"contains_point","qualname":"::object::PointDistance::contains_point","value":"fn (&self, point: &<Self::Envelope as Envelope>::Point) -> bool","parent":{"krate":0,"index":376},"children":[],"decl_id":null,"docs":" Returns true if a point is contained within this object.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":392},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":55333,"byte_end":55344,"line_start":36,"line_end":36,"column_start":11,"column_end":22},"name":"RTreeParams","qualname":"::params::RTreeParams","value":"RTreeParams: Send + Sync","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395}],"decl_id":null,"docs":" Defines static parameters for an r-tree.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":393},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":55671,"byte_end":55679,"line_start":41,"line_end":41,"column_start":11,"column_end":19},"name":"MIN_SIZE","qualname":"::params::RTreeParams::MIN_SIZE","value":"usize","parent":{"krate":0,"index":392},"children":[],"decl_id":null,"docs":" The minimum size of an internal node. Must be at most half as large as `MAX_SIZE`.\n Choosing a value around one half or one third of `MAX_SIZE` is recommended. Higher\n values should yield slightly better tree quality while lower values may benefit\n insertion performance.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":394},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":55839,"byte_end":55847,"line_start":45,"line_end":45,"column_start":11,"column_end":19},"name":"MAX_SIZE","qualname":"::params::RTreeParams::MAX_SIZE","value":"usize","parent":{"krate":0,"index":392},"children":[],"decl_id":null,"docs":" The maximum size of an internal node. Larger values will improve insertion performance\n but increase the average query time.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":395},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":55967,"byte_end":55991,"line_start":48,"line_end":48,"column_start":10,"column_end":34},"name":"DefaultInsertionStrategy","qualname":"::params::RTreeParams::DefaultInsertionStrategy","value":"type DefaultInsertionStrategy: InsertionStrategy;","parent":{"krate":0,"index":392},"children":[],"decl_id":null,"docs":" The insertion strategy which is used when calling [insert](struct.RTree.html#method.insert).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":716},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":56149,"byte_end":56162,"line_start":53,"line_end":53,"column_start":12,"column_end":25},"name":"DefaultParams","qualname":"::params::DefaultParams","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default parameters used when creating an r-tree without specific parameters.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":400},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":57030,"byte_end":57047,"line_start":73,"line_end":73,"column_start":11,"column_end":28},"name":"InsertionStrategy","qualname":"::params::InsertionStrategy","value":"InsertionStrategy","parent":null,"children":[{"krate":0,"index":401}],"decl_id":null,"docs":" Defines how points are inserted into an r-tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":57076,"byte_end":57082,"line_start":75,"line_end":75,"column_start":8,"column_end":14},"name":"insert","qualname":"::params::InsertionStrategy::insert","value":"fn <T, Params> (tree: &mut RTree<T, Params>, t: T) -> ()","parent":{"krate":0,"index":400},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":411},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":60231,"byte_end":60239,"line_start":99,"line_end":99,"column_start":11,"column_end":19},"name":"RTreeNum","qualname":"::point::RTreeNum","value":"RTreeNum: Bounded + Num + Clone + Copy + Signed + PartialOrd + Debug","parent":null,"children":[],"decl_id":null,"docs":" Defines a number type that is compatible with rstar.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":414},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":61486,"byte_end":61491,"line_start":152,"line_end":152,"column_start":11,"column_end":16},"name":"Point","qualname":"::point::Point","value":"Point: Copy + Clone + PartialEq + Debug","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":419},{"krate":0,"index":420}],"decl_id":null,"docs":" Defines a point type that is compatible with rstar.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":415},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":61586,"byte_end":61592,"line_start":154,"line_end":154,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::point::Point::Scalar","value":"type Scalar: RTreeNum;","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" The number type used by this point type.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":416},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":61668,"byte_end":61678,"line_start":157,"line_end":157,"column_start":11,"column_end":21},"name":"DIMENSIONS","qualname":"::point::Point::DIMENSIONS","value":"usize","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" The number of dimensions of this point type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":61996,"byte_end":62004,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"generate","qualname":"::point::Point::generate","value":"fn (generator: impl Fn(usize) -> Self::Scalar) -> Self","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" Creates a new point value with given values for each dimension.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":62228,"byte_end":62231,"line_start":168,"line_end":168,"column_start":8,"column_end":11},"name":"nth","qualname":"::point::Point::nth","value":"fn (&self, index: usize) -> Self::Scalar","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" Returns a single coordinate of this point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":62326,"byte_end":62333,"line_start":171,"line_end":171,"column_start":8,"column_end":15},"name":"nth_mut","qualname":"::point::Point::nth_mut","value":"fn (&mut self, index: usize) -> &mut Self::Scalar","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" Mutable variant of [nth](#methods.nth).\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":458},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"primitives","qualname":"::primitives","value":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/mod.rs","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":484},{"krate":0,"index":513},{"krate":0,"index":514}],"decl_id":null,"docs":" Contains primitives ready for insertion into an r-tree.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":797},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":66887,"byte_end":66891,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Line","qualname":"::primitives::line::Line","value":"Line { from, to }","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800}],"decl_id":null,"docs":" A line defined by a start and and end point.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":799},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":66956,"byte_end":66960,"line_start":35,"line_end":35,"column_start":9,"column_end":13},"name":"from","qualname":"::primitives::line::Line::from","value":"P","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" The line's start point\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":800},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":67003,"byte_end":67005,"line_start":37,"line_end":37,"column_start":9,"column_end":11},"name":"to","qualname":"::primitives::line::Line::to","value":"P","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" The line's end point.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":67109,"byte_end":67112,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<Line<P>>::new","value":"fn (from: P, to: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new line between two points.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":68027,"byte_end":68040,"line_start":82,"line_end":82,"column_start":12,"column_end":25},"name":"nearest_point","qualname":"<Line<P>>::nearest_point","value":"fn (&self, query_point: &P) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest point on this line relative to a given point.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":830},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":70012,"byte_end":70021,"line_start":20,"line_end":20,"column_start":12,"column_end":21},"name":"Rectangle","qualname":"::primitives::rectangle::Rectangle","value":"Rectangle {  }","parent":null,"children":[{"krate":0,"index":832}],"decl_id":null,"docs":" An n-dimensional rectangle defined by its two corners.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":70179,"byte_end":70191,"line_start":32,"line_end":32,"column_start":12,"column_end":24},"name":"from_corners","qualname":"<Rectangle<P>>::from_corners","value":"fn (corner_1: P, corner_2: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rectangle defined by two corners.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":70395,"byte_end":70404,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"from_aabb","qualname":"<Rectangle<P>>::from_aabb","value":"fn (aabb: AABB<P>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rectangle defined by it's [axis aligned bounding box](struct.AABB.html).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":70648,"byte_end":70653,"line_start":45,"line_end":45,"column_start":12,"column_end":17},"name":"lower","qualname":"<Rectangle<P>>::lower","value":"fn (&self) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the rectangle's lower corner.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":70879,"byte_end":70884,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"upper","qualname":"<Rectangle<P>>::upper","value":"fn (&self) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the rectangle's upper corner.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":71454,"byte_end":71467,"line_start":85,"line_end":85,"column_start":12,"column_end":25},"name":"nearest_point","qualname":"<Rectangle<P>>::nearest_point","value":"fn (&self, query_point: &P) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest point within this rectangle to a given point.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":858},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":78415,"byte_end":78420,"line_start":142,"line_end":142,"column_start":12,"column_end":17},"name":"RTree","qualname":"::rtree::RTree","value":"RTree {  }","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863}],"decl_id":null,"docs":" An n-dimensional r-tree data structure.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":79976,"byte_end":79979,"line_start":209,"line_end":209,"column_start":12,"column_end":15},"name":"new","qualname":"<RTree<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty r-tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":80609,"byte_end":80618,"line_start":225,"line_end":225,"column_start":12,"column_end":21},"name":"bulk_load","qualname":"<RTree<T>>::bulk_load","value":"fn (elements: Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new r-tree with some elements already inserted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":81391,"byte_end":81409,"line_start":246,"line_end":246,"column_start":12,"column_end":30},"name":"bulk_load_parallel","qualname":"<RTree<T>>::bulk_load_parallel","value":"fn (elements: Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new r-tree with some elements already inserted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":82322,"byte_end":82352,"line_start":269,"line_end":269,"column_start":12,"column_end":42},"name":"bulk_load_with_params_parallel","qualname":"<RTree<T, Params>>::bulk_load_with_params_parallel","value":"fn (elements: Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new r-tree with some elements already inserted and configurable parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":82791,"byte_end":82806,"line_start":283,"line_end":283,"column_start":12,"column_end":27},"name":"new_with_params","qualname":"<RTree<T, Params>>::new_with_params","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty r-tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":83314,"byte_end":83335,"line_start":296,"line_end":296,"column_start":12,"column_end":33},"name":"bulk_load_with_params","qualname":"<RTree<T, Params>>::bulk_load_with_params","value":"fn (elements: Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new r-tree with some given elements and configurable parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":83832,"byte_end":83836,"line_start":313,"line_end":313,"column_start":12,"column_end":16},"name":"size","qualname":"<RTree<T, Params>>::size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of objects in an r-tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":84301,"byte_end":84305,"line_start":329,"line_end":329,"column_start":12,"column_end":16},"name":"iter","qualname":"<RTree<T, Params>>::iter","value":"fn (&self) -> RTreeIterator<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all elements contained in the tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":84982,"byte_end":84990,"line_start":343,"line_end":343,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<RTree<T, Params>>::iter_mut","value":"fn (&mut self) -> RTreeIteratorMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all mutable elements contained in the tree.nearest_neighbor","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":86004,"byte_end":86022,"line_start":367,"line_end":367,"column_start":12,"column_end":30},"name":"locate_in_envelope","qualname":"<RTree<T, Params>>::locate_in_envelope","value":"fn (&self, envelope: &T::Envelope) -> LocateInEnvelope<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns all elements contained in an [Envelope](trait.Envelope.html).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":86258,"byte_end":86280,"line_start":372,"line_end":372,"column_start":12,"column_end":34},"name":"locate_in_envelope_mut","qualname":"<RTree<T, Params>>::locate_in_envelope_mut","value":"fn (&mut self, envelope: &T::Envelope) -> LocateInEnvelopeMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Mutable variant of [locate_in_envelope](#method.locate_in_envelope).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":86720,"byte_end":86751,"line_start":381,"line_end":381,"column_start":12,"column_end":43},"name":"locate_in_envelope_intersecting","qualname":"<RTree<T, Params>>::locate_in_envelope_intersecting","value":"fn (&self, envelope: &T::Envelope) -> LocateInEnvelopeIntersecting<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns all elements whose envelope intersects a given envelope.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":87102,"byte_end":87137,"line_start":392,"line_end":392,"column_start":12,"column_end":47},"name":"locate_in_envelope_intersecting_mut","qualname":"<RTree<T, Params>>::locate_in_envelope_intersecting_mut","value":"fn (&mut self, envelope: &T::Envelope) -> LocateInEnvelopeIntersectingMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Mutable variant of [locate_in_envelope_intersecting](#method.locate_in_envelope_intersecting)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":88218,"byte_end":88233,"line_start":431,"line_end":431,"column_start":12,"column_end":27},"name":"locate_at_point","qualname":"<RTree<T, Params>>::locate_at_point","value":"fn (&self, point: &<T::Envelope as Envelope>::Point) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a single object that covers a given point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":88435,"byte_end":88454,"line_start":436,"line_end":436,"column_start":12,"column_end":31},"name":"locate_at_point_mut","qualname":"<RTree<T, Params>>::locate_at_point_mut","value":"fn (&mut self, point: &<T::Envelope as Envelope>::Point) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Mutable variant of [locate_at_point](#method.locate_at_point).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":89342,"byte_end":89361,"line_start":461,"line_end":461,"column_start":12,"column_end":31},"name":"locate_all_at_point","qualname":"<RTree<T, Params>>::locate_all_at_point","value":"fn (&self, point: &<T::Envelope as Envelope>::Point) -> LocateAllAtPoint<T>","parent":null,"children":[],"decl_id":null,"docs":" Locate all elements containing a given point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":89634,"byte_end":89657,"line_start":469,"line_end":469,"column_start":12,"column_end":35},"name":"locate_all_at_point_mut","qualname":"<RTree<T, Params>>::locate_all_at_point_mut","value":"fn (&mut self, point: &<T::Envelope as Envelope>::Point) -> LocateAllAtPointMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Mutable variant of [locate_at_point_mut](#method.locate_at_point_mut).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":90564,"byte_end":90579,"line_start":495,"line_end":495,"column_start":12,"column_end":27},"name":"remove_at_point","qualname":"<RTree<T, Params>>::remove_at_point","value":"fn (&mut self, point: &<T::Envelope as Envelope>::Point) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes an element containing a given point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":91319,"byte_end":91327,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"name":"contains","qualname":"<RTree<T, Params>>::contains","value":"fn (&self, t: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if a given element is equal (`==`) to an element in the\n r-tree.\n ```\n use rstar::RTree;","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":92054,"byte_end":92060,"line_start":540,"line_end":540,"column_start":12,"column_end":18},"name":"remove","qualname":"<RTree<T, Params>>::remove","value":"fn (&mut self, t: &T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns an element of the r-tree equal (`==`) to a given element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":92950,"byte_end":92966,"line_start":570,"line_end":570,"column_start":12,"column_end":28},"name":"nearest_neighbor","qualname":"<RTree<T, Params>>::nearest_neighbor","value":"fn (&self, query_point: &<T::Envelope as Envelope>::Point) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest neighbor for a given point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":94106,"byte_end":94127,"line_start":600,"line_end":600,"column_start":12,"column_end":33},"name":"nearest_neighbor_iter","qualname":"<RTree<T, Params>>::nearest_neighbor_iter","value":"fn (&self, query_point: &<T::Envelope as Envelope>::Point) -> impl Iterator<Item = &T>","parent":null,"children":[],"decl_id":null,"docs":" Returns all elements of the tree sorted by their distance to a given point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":94750,"byte_end":94756,"line_start":621,"line_end":621,"column_start":12,"column_end":18},"name":"insert","qualname":"<RTree<T, Params>>::insert","value":"fn (&mut self, t: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the r-tree.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":868},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":98573,"byte_end":98577,"line_start":23,"line_end":23,"column_start":12,"column_end":16},"name":"AABB","qualname":"::structures::aabb::AABB","value":"AABB {  }","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871}],"decl_id":null,"docs":" An n-dimensional axis aligned bounding box (AABB).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":98737,"byte_end":98747,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"from_point","qualname":"<AABB<P>>::from_point","value":"fn (p: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the AABB encompassing a single point.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":98981,"byte_end":98986,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"lower","qualname":"<AABB<P>>::lower","value":"fn (&self) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the AABB's lower corner.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":99200,"byte_end":99205,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"upper","qualname":"<AABB<P>>::upper","value":"fn (&self) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the AABB's upper corner.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":99309,"byte_end":99321,"line_start":57,"line_end":57,"column_start":12,"column_end":24},"name":"from_corners","qualname":"<AABB<P>>::from_corners","value":"fn (p1: P, p2: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new AABB encompassing two points.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":99529,"byte_end":99540,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"from_points","qualname":"<AABB<P>>::from_points","value":"fn <'a, I> (i: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new AABB encompassing a collection of points.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":100133,"byte_end":100142,"line_start":85,"line_end":85,"column_start":12,"column_end":21},"name":"min_point","qualname":"<AABB<P>>::min_point","value":"fn (&self, point: &P) -> P","parent":null,"children":[],"decl_id":null,"docs":" Returns the point within this AABB closest to a given point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":100328,"byte_end":100338,"line_start":90,"line_end":90,"column_start":12,"column_end":22},"name":"distance_2","qualname":"<AABB<P>>::distance_2","value":"fn (&self, point: &P) -> P::Scalar","parent":null,"children":[],"decl_id":null,"docs":" Returns the squared distance to the AABB's [min_point](#method.min_point).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":903},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105042,"byte_end":105046,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"Leaf","qualname":"::structures::node::RTreeNode::Leaf","value":"RTreeNode::Leaf(T)","parent":{"krate":0,"index":901},"children":[],"decl_id":null,"docs":" A leaf node, only containing the r-tree object\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":906},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105108,"byte_end":105114,"line_start":29,"line_end":29,"column_start":5,"column_end":11},"name":"Parent","qualname":"::structures::node::RTreeNode::Parent","value":"RTreeNode::Parent(ParentNodeData<T>)","parent":{"krate":0,"index":901},"children":[],"decl_id":null,"docs":" A parent node containing several child nodes\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":901},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":104942,"byte_end":104951,"line_start":22,"line_end":22,"column_start":10,"column_end":19},"name":"RTreeNode","qualname":"::structures::node::RTreeNode","value":"RTreeNode::{Leaf, Parent}","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":906}],"decl_id":null,"docs":" An internal tree node. Only exposed for the debug feature used by the rstar demo.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":915},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105284,"byte_end":105298,"line_start":37,"line_end":37,"column_start":12,"column_end":26},"name":"ParentNodeData","qualname":"::structures::node::ParentNodeData","value":"ParentNodeData { children, envelope }","parent":null,"children":[{"krate":0,"index":917},{"krate":0,"index":918}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":917},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105338,"byte_end":105346,"line_start":41,"line_end":41,"column_start":9,"column_end":17},"name":"children","qualname":"::structures::node::ParentNodeData::children","value":"std::vec::Vec<structures::node::RTreeNode<T>>","parent":{"krate":0,"index":915},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":918},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105375,"byte_end":105383,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"name":"envelope","qualname":"::structures::node::ParentNodeData::envelope","value":"<T as object::RTreeObject>::Envelope","parent":{"krate":0,"index":915},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105768,"byte_end":105775,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"is_leaf","qualname":"<RTreeNode<T>>::is_leaf","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105983,"byte_end":105991,"line_start":76,"line_end":76,"column_start":12,"column_end":20},"name":"new_root","qualname":"<ParentNodeData<T>>::new_root","value":"fn <Params> () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":106217,"byte_end":106227,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"new_parent","qualname":"<ParentNodeData<T>>::new_parent","value":"fn (children: Vec<RTreeNode<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":106389,"byte_end":106401,"line_start":92,"line_end":92,"column_start":12,"column_end":24},"name":"sanity_check","qualname":"<ParentNodeData<T>>::sanity_check","value":"fn <Params> (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":107857,"byte_end":107865,"line_start":140,"line_end":140,"column_start":12,"column_end":20},"name":"contains","qualname":"<ParentNodeData<T>>::contains","value":"fn (&self, t: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/bulk_load/bulk_load_common.rs","byte_start":2107,"byte_end":2127,"line_start":10,"line_end":10,"column_start":22,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/bulk_load/bulk_load_common.rs","byte_start":2600,"byte_end":2620,"line_start":29,"line_end":29,"column_start":35,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/bulk_load/bulk_load_sequential.rs","byte_start":11479,"byte_end":11495,"line_start":53,"line_end":53,"column_start":56,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":14155,"byte_end":14172,"line_start":25,"line_end":25,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":14602,"byte_end":14619,"line_start":43,"line_end":43,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":15491,"byte_end":15511,"line_start":79,"line_end":79,"column_start":19,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":15950,"byte_end":15970,"line_start":97,"line_end":97,"column_start":32,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":19686,"byte_end":19710,"line_start":15,"line_end":15,"column_start":27,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":19865,"byte_end":19889,"line_start":24,"line_end":24,"column_start":28,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":20129,"byte_end":20153,"line_start":34,"line_end":34,"column_start":20,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":20208,"byte_end":20232,"line_start":36,"line_end":36,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":20390,"byte_end":20413,"line_start":45,"line_end":45,"column_start":13,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":21352,"byte_end":21375,"line_start":77,"line_end":77,"column_start":26,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/rstar.rs","byte_start":32563,"byte_end":32585,"line_start":27,"line_end":27,"column_start":28,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":41877,"byte_end":41901,"line_start":32,"line_end":32,"column_start":9,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":42069,"byte_end":42093,"line_start":41,"line_end":41,"column_start":34,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":42532,"byte_end":42564,"line_start":63,"line_end":63,"column_start":9,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":42740,"byte_end":42772,"line_start":72,"line_end":72,"column_start":34,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":43027,"byte_end":43040,"line_start":85,"line_end":85,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":43410,"byte_end":43431,"line_start":105,"line_end":105,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":43613,"byte_end":43634,"line_start":114,"line_end":114,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":44230,"byte_end":44250,"line_start":139,"line_end":139,"column_start":13,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":44444,"byte_end":44464,"line_start":148,"line_end":148,"column_start":38,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":53598,"byte_end":53599,"line_start":166,"line_end":166,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":53755,"byte_end":53756,"line_start":177,"line_end":177,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":56186,"byte_end":56199,"line_start":55,"line_end":55,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":60325,"byte_end":60326,"line_start":101,"line_end":101,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":62405,"byte_end":62406,"line_start":174,"line_end":174,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":67021,"byte_end":67025,"line_start":40,"line_end":40,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":67198,"byte_end":67202,"line_start":50,"line_end":50,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":67365,"byte_end":67369,"line_start":61,"line_end":61,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":68417,"byte_end":68421,"line_start":96,"line_end":96,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":70077,"byte_end":70086,"line_start":27,"line_end":27,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":70960,"byte_end":70969,"line_start":58,"line_end":58,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":71095,"byte_end":71104,"line_start":67,"line_end":67,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":71238,"byte_end":71247,"line_start":78,"line_end":78,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":71575,"byte_end":71584,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":73179,"byte_end":73184,"line_start":15,"line_end":15,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":79133,"byte_end":79144,"line_start":178,"line_end":178,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":79427,"byte_end":79432,"line_start":188,"line_end":188,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":79788,"byte_end":79793,"line_start":202,"line_end":202,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":80710,"byte_end":80715,"line_start":230,"line_end":230,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":81518,"byte_end":81523,"line_start":251,"line_end":251,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":82496,"byte_end":82501,"line_start":274,"line_end":274,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":87828,"byte_end":87833,"line_start":420,"line_end":420,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":90912,"byte_end":90917,"line_start":505,"line_end":505,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":92352,"byte_end":92357,"line_start":550,"line_end":550,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":94342,"byte_end":94347,"line_start":608,"line_end":608,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":94884,"byte_end":94889,"line_start":627,"line_end":627,"column_start":17,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":98642,"byte_end":98646,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":100550,"byte_end":100554,"line_start":99,"line_end":99,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105425,"byte_end":105434,"line_start":45,"line_end":45,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105716,"byte_end":105725,"line_start":60,"line_end":60,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105926,"byte_end":105940,"line_start":72,"line_end":72,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":107788,"byte_end":107802,"line_start":136,"line_end":136,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/lib.rs","byte_start":957,"byte_end":967,"line_start":29,"line_end":29,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":458}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/bulk_load/bulk_load_common.rs","byte_start":2107,"byte_end":2127,"line_start":10,"line_end":10,"column_start":22,"column_end":42},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/bulk_load/bulk_load_common.rs","byte_start":2600,"byte_end":2620,"line_start":29,"line_end":29,"column_start":35,"column_end":55},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":20},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/bulk_load/bulk_load_sequential.rs","byte_start":11479,"byte_end":11495,"line_start":53,"line_end":53,"column_start":56,"column_end":72},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":86},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":14155,"byte_end":14172,"line_start":25,"line_end":25,"column_start":19,"column_end":36},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":14602,"byte_end":14619,"line_start":43,"line_end":43,"column_start":32,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":134},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":15491,"byte_end":15511,"line_start":79,"line_end":79,"column_start":19,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/iterators.rs","byte_start":15950,"byte_end":15970,"line_start":97,"line_end":97,"column_start":32,"column_end":52},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":19686,"byte_end":19710,"line_start":15,"line_end":15,"column_start":27,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":184},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":19865,"byte_end":19889,"line_start":24,"line_end":24,"column_start":28,"column_end":52},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":184},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":20129,"byte_end":20153,"line_start":34,"line_end":34,"column_start":20,"column_end":44},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":184},"to":{"krate":2,"index":2044}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":20208,"byte_end":20232,"line_start":36,"line_end":36,"column_start":21,"column_end":45},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":184},"to":{"krate":2,"index":2065}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":20390,"byte_end":20413,"line_start":45,"line_end":45,"column_start":13,"column_end":36},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":215},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/nearest_neighbor.rs","byte_start":21352,"byte_end":21375,"line_start":77,"line_end":77,"column_start":26,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":215},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/rstar.rs","byte_start":32563,"byte_end":32585,"line_start":27,"line_end":27,"column_start":28,"column_end":50},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":254},"to":{"krate":0,"index":400}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":41877,"byte_end":41901,"line_start":32,"line_end":32,"column_start":9,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":42069,"byte_end":42093,"line_start":41,"line_end":41,"column_start":34,"column_end":58},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":293},"to":{"krate":0,"index":287}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":42532,"byte_end":42564,"line_start":63,"line_end":63,"column_start":9,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":42740,"byte_end":42772,"line_start":72,"line_end":72,"column_start":34,"column_end":66},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":304},"to":{"krate":0,"index":287}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":43027,"byte_end":43040,"line_start":85,"line_end":85,"column_start":34,"column_end":47},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":314},"to":{"krate":0,"index":287}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":43410,"byte_end":43431,"line_start":105,"line_end":105,"column_start":9,"column_end":30},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":43613,"byte_end":43634,"line_start":114,"line_end":114,"column_start":34,"column_end":55},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":320},"to":{"krate":0,"index":287}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":44230,"byte_end":44250,"line_start":139,"line_end":139,"column_start":13,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/algorithm/selection_functions.rs","byte_start":44444,"byte_end":44464,"line_start":148,"line_end":148,"column_start":38,"column_end":58},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":331},"to":{"krate":0,"index":287}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45245,"byte_end":45250,"line_start":9,"line_end":9,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45253,"byte_end":45257,"line_start":9,"line_end":9,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1542},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45260,"byte_end":45269,"line_start":9,"line_end":9,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":2039},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/envelope.rs","byte_start":45284,"byte_end":45289,"line_start":9,"line_end":9,"column_start":60,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":7479},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":52836,"byte_end":52847,"line_start":149,"line_end":149,"column_start":26,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":373},"to":{"krate":0,"index":376}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":53598,"byte_end":53599,"line_start":166,"line_end":166,"column_start":25,"column_end":26},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":380},"to":{"krate":0,"index":373}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/object.rs","byte_start":53755,"byte_end":53756,"line_start":177,"line_end":177,"column_start":27,"column_end":28},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":384},"to":{"krate":0,"index":376}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":55346,"byte_end":55350,"line_start":36,"line_end":36,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":392}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":55353,"byte_end":55357,"line_start":36,"line_end":36,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1544},"to":{"krate":0,"index":392}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/params.rs","byte_start":56186,"byte_end":56199,"line_start":55,"line_end":55,"column_start":22,"column_end":35},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":716},"to":{"krate":0,"index":392}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":60241,"byte_end":60248,"line_start":99,"line_end":99,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":18,"index":96},"to":{"krate":0,"index":411}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":60251,"byte_end":60254,"line_start":99,"line_end":99,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":18,"index":571},"to":{"krate":0,"index":411}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":60257,"byte_end":60262,"line_start":99,"line_end":99,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":411}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":60265,"byte_end":60269,"line_start":99,"line_end":99,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":1542},"to":{"krate":0,"index":411}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":60272,"byte_end":60278,"line_start":99,"line_end":99,"column_start":52,"column_end":58},"kind":"SuperTrait","from":{"krate":18,"index":546},"to":{"krate":0,"index":411}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":60281,"byte_end":60291,"line_start":99,"line_end":99,"column_start":61,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":411}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":60294,"byte_end":60299,"line_start":99,"line_end":99,"column_start":74,"column_end":79},"kind":"SuperTrait","from":{"krate":2,"index":7479},"to":{"krate":0,"index":411}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":60325,"byte_end":60326,"line_start":101,"line_end":101,"column_start":22,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":413},"to":{"krate":0,"index":411}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":61493,"byte_end":61497,"line_start":152,"line_end":152,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1542},"to":{"krate":0,"index":414}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":61500,"byte_end":61505,"line_start":152,"line_end":152,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":414}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":61508,"byte_end":61517,"line_start":152,"line_end":152,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2039},"to":{"krate":0,"index":414}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":61520,"byte_end":61525,"line_start":152,"line_end":152,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":7479},"to":{"krate":0,"index":414}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":62405,"byte_end":62406,"line_start":174,"line_end":174,"column_start":22,"column_end":23},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":422},"to":{"krate":0,"index":423}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/point.rs","byte_start":62446,"byte_end":62451,"line_start":176,"line_end":176,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":414},"to":{"krate":0,"index":423}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":67021,"byte_end":67025,"line_start":40,"line_end":40,"column_start":9,"column_end":13},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":797},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":67198,"byte_end":67202,"line_start":50,"line_end":50,"column_start":25,"column_end":29},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":797},"to":{"krate":0,"index":373}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":67365,"byte_end":67369,"line_start":61,"line_end":61,"column_start":9,"column_end":13},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":797},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/line.rs","byte_start":68417,"byte_end":68421,"line_start":96,"line_end":96,"column_start":27,"column_end":31},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":797},"to":{"krate":0,"index":376}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":70077,"byte_end":70086,"line_start":27,"line_end":27,"column_start":9,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":70960,"byte_end":70969,"line_start":58,"line_end":58,"column_start":27,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":71095,"byte_end":71104,"line_start":67,"line_end":67,"column_start":25,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":830},"to":{"krate":0,"index":373}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":71238,"byte_end":71247,"line_start":78,"line_end":78,"column_start":9,"column_end":18},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/primitives/rectangle.rs","byte_start":71575,"byte_end":71584,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":830},"to":{"krate":0,"index":376}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":73179,"byte_end":73184,"line_start":15,"line_end":15,"column_start":21,"column_end":26},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":858},"to":{"krate":2,"index":2204}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":79133,"byte_end":79144,"line_start":178,"line_end":178,"column_start":43,"column_end":54},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":537},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":79427,"byte_end":79432,"line_start":188,"line_end":188,"column_start":39,"column_end":44},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":858},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":79788,"byte_end":79793,"line_start":202,"line_end":202,"column_start":9,"column_end":14},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":80710,"byte_end":80715,"line_start":230,"line_end":230,"column_start":9,"column_end":14},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":81518,"byte_end":81523,"line_start":251,"line_end":251,"column_start":17,"column_end":22},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":82496,"byte_end":82501,"line_start":274,"line_end":274,"column_start":17,"column_end":22},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":87828,"byte_end":87833,"line_start":420,"line_end":420,"column_start":17,"column_end":22},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":90912,"byte_end":90917,"line_start":505,"line_end":505,"column_start":17,"column_end":22},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":92352,"byte_end":92357,"line_start":550,"line_end":550,"column_start":17,"column_end":22},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":94342,"byte_end":94347,"line_start":608,"line_end":608,"column_start":17,"column_end":22},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/rtree.rs","byte_start":94884,"byte_end":94889,"line_start":627,"line_end":627,"column_start":17,"column_end":22},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":98642,"byte_end":98646,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":868},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/aabb.rs","byte_start":100550,"byte_end":100554,"line_start":99,"line_end":99,"column_start":22,"column_end":26},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":868},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105425,"byte_end":105434,"line_start":45,"line_end":45,"column_start":25,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":901},"to":{"krate":0,"index":373}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105716,"byte_end":105725,"line_start":60,"line_end":60,"column_start":9,"column_end":18},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":901},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":105926,"byte_end":105940,"line_start":72,"line_end":72,"column_start":9,"column_end":23},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mrcoffee/.cargo/registry/src/github.com-1ecc6299db9ec823/rstar-0.2.0/src/structures/node.rs","byte_start":107788,"byte_end":107802,"line_start":136,"line_end":136,"column_start":9,"column_end":23},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":915},"to":{"krate":4294967295,"index":4294967295}}]}